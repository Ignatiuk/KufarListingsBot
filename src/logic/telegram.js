const { Telegraf } = require('telegraf');
const config = require('../../config/index.js');

const User = require('../models/user.js');
const Request = require('../models/request');

const bot = new Telegraf(config.BOT_TOKEN);

bot.start(async ctx => {
  const userData = ctx.from;
  const user = await User.findOne({ id: userData.id });

  if (!user) {
    const small = new User({
      name: userData.first_name + ' ' + userData.last_name,
      id: userData.id,
      registrationDate: ctx.update.message.date,
      session: '',
      requests: [],
    });

    await small.save();
  }

  const paragraphs = [
    '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –ö—É—Ñ–∞—Ä–µ',
    '–¢—ã –≥–æ–≤–æ—Ä–∏—à—å –º–Ω–µ, –ø–æ –∫–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É –¥–µ–ª–∞—Ç—å –ø–æ–∏—Å–∫, –∞ —è —É–≤–µ–¥–æ–º–ª—è—é —Ç–µ–±—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –ø–æ –º–µ—Ä–µ –∏—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è üòá',
    '–ß—Ç–æ —è —É–º–µ—é: /menu ü§ì',
  ].join('\n\n');

  ctx.reply('üëã');
  setTimeout(() => ctx.reply(paragraphs), 1000);
});

bot.command('new', async ctx => {
  const request = await Request.findOne({ userId: ctx.from.id });

  if (request) {
    return ctx.reply(
      `–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å: *${request.query}*\n\n–¢—ã –º–æ–∂–µ—à—å —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π /delete`,
      { parse_mode: 'Markdown' }
    );
  }

  await User.updateOne({ id: ctx.from.id }, { session: '/new' });

  await ctx.reply(
    '–ò—Ç–∞–∫, –Ω–æ–≤–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ!\n\n–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å—Ç—Ä–æ–∫—É, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä–æ–π —è –±—É–¥—É –∏—Å–∫–∞—Ç—å –Ω—É–∂–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è.\n\n–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: *macbook pro*',
    { parse_mode: 'Markdown' },
  );
});

bot.command('delete', async ctx => {
  const request = await Request.deleteOne({ userId: ctx.from.id });

  ctx.reply('–û—Å—Ç–∞–Ω–æ–≤–∏–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ! üôÉ\n\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ: /new');
});

bot.command('cancel', async ctx => {
  await User.updateOne({ id: ctx.from.id }, { session: '' });

  ctx.reply('–û—Ç–º–µ–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ! –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ /menu üëÄ');
});

bot.command('my', async ctx => {
  const requests = await Request.find({ userId: ctx.from.id });

  ctx.reply(`–í–∞—à–∏ –∑–∞–ø—Ä–æ—Å—ã:\n\n${requests.map(req => req.query).join('\n')}`);
});

bot.command('message', async ctx => {
  if (ctx.from.id.toString() === config.ADMIN_ID) {
    await User.updateOne({ id: ctx.from.id }, { session: '/message' });

    ctx.reply('–ò—Ç–∞–∫, –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ *–≤—Å–µ–º* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!\n\n–ü–∏—à–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ!', { parse_mode: 'Markdown' });
  } else {
    ctx.reply('–£ —Ç–µ–±—è –Ω–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ üò¢');
  }
});

bot.command('menu', ctx => {
  const text =
`–ö–æ–º–∞–Ω–¥—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —è —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å üëá\n
/new ‚Äî –Ω–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
/delete ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
`

  ctx.reply(text);
});

bot.on('message', async ctx => {
  const user = await User.findOne({ id: ctx.from.id });

  if (user && user.session === '/new') {
    const request = new Request({
      userId: user.id,
      query: ctx.update.message.text,
    });

    await request.save();
    await User.updateOne({ id: ctx.from.id }, { session: '' });

    return ctx.reply(
      `–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –∫–∞–∂–¥—ã–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É *${request.query}* –ø–æ—è–≤–∏—Ç—Å—è —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–æ–≤–µ–Ω—å–∫–æ–µ, —è —Ç–µ–±–µ —Å–æ–æ–±—â—É!\n\nP.S. –ü—Ä–æ–≤–µ—Ä—è—é —Ä–∞–∑ –≤ *3 –º–∏–Ω—É—Ç—ã* üëÄ`,
      { parse_mode: 'Markdown' }
    );
  } else if (user && user.session === '/message') {
    const users = await User.find({});

    users.forEach(user => {
      try {
        bot.telegram.sendMessage(user.id, ctx.message.text, { parse_mode: 'Markdown' });
      } catch (e) {
        console.error(e);
      }
    });

    return await User.updateOne({ id: ctx.from.id }, { session: '' });
  }

  ctx.reply('–ù–µ–º–Ω–æ–≥–æ –Ω–µ –ø–æ–Ω—è–ª —Ç–µ–±—è üò™\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã: /menu');
})

bot.launch();

module.exports = bot;